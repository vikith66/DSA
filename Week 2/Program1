#include<iostream>
using namespace std;

struct sparse{
int row,col,val;
};

int main(){
	int m,n,count=0;
	cout<<"Enter number of rows:";
	cin>>m;
	cout<<"Enter number of columns:";
	cin>>n;
	int matrix[m][n];
	
	//read elements for matrix
	cout<<"Enter elements for matrix:";
		for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			cin>>matrix[i][j];
			if(matrix[i][j]!=0){
				count++;
			}
		}
	}
	
	struct sparse s[count+1];
	s[0].row=m;
	s[0].col=n;
	s[0].val=count;
	
	//creating 1d array of triplets
	int index=1;
	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			if(matrix[i][j]!=0){
			s[index].row=i;
			s[index].col=j;
			s[index].val=matrix[i][j];
			index++;
		  }
    	}
 }
 
 //display triplet representation
 cout<<"\nTriplet Representation\n";
 cout<<"Row\tColumn\tValue\n";
 for(int i=0;i<count+1;i++){
 	cout<<s[i].row<<"\t"<<s[i].col<<"\t"<<s[i].val<<"\n";
 }
 
 //reconstruct sparse matrix from 1d array of triplets
 int resultMatrix[m][n];
 
 //make all elements zero in the resultant matrix
 for(int i=0;i<m;i++){
 	for(int j=0;j<n;j++){
 		resultMatrix[i][j]=0;
	 }
 }
 
  //reconstruct sparse matrix from 1d array of triplets
 index=1;
  for(int i=0;i<m;i++){
 	for(int j=0;j<n;j++){
		if(index==s[0].val+1){
			break;
		}
 		if(i==s[index].row&&j==s[index].col){
 			resultMatrix[i][j]=s[index++].val;
		 }
	 }
 }
 
 //display reconstructed matrix
 cout<<"\nReconstructed matrix from triplets\n";
 for(int i=0;i<m;i++){
 	for(int j=0;j<n;j++){
 		cout<<resultMatrix[i][j]<<" ";
	 }
	 cout<<"\n";
 }
 
	return 0;
}
