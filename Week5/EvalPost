P1.
#include <iostream>
#include <string>
using namespace std;

class Stack {
private:
    int* arr;
    int capacity;
    int top;

public:
    Stack(int size) {
        capacity = size;
        arr = new int[capacity];
        top = -1;
    }

    ~Stack() {
        delete[] arr;
    }

    void push(int value) {
        if (top == capacity - 1) {
            cout << "Stack overflow!" << endl;
            return;
        }
        arr[++top] = value;
    }

    int pop() {
        if (top == -1) {
            cout << "Stack underflow!" << endl;
            return -1;
        }
        return arr[top--];
    }

    int peek() {
        if (top == -1) {
            cout << "Stack is empty!" << endl;
            return -1;
        }
        return arr[top];
    }

    bool isEmpty() {
        return top == -1;
    }
};
int stringToInt(const string& str) {
    int result = 0;
    for (int i = 0; i < str.length(); i++) {
        result = result * 10 + (str[i] - '0');
    }
    return result;
}

int evaluatePostfix(string expression) {
    Stack s(expression.length());
    string token = "";

    for (int i = 0; i < expression.length(); i++) {
        char c = expression[i];

        if (c == ' ') {
            if (token != "") {
                s.push(stringToInt(token));
                token = "";
            }
        } else if (isdigit(c)) {
            token += c;
        } else {
            int operand2 = s.pop();
            int operand1 = s.pop();
            if (c == '+') s.push(operand1 + operand2);
            if (c == '-') s.push(operand1 - operand2);
            if (c == '*') s.push(operand1 * operand2);
            if (c == '/') s.push(operand1 / operand2);
        }
    }

    if (token != "") {
        s.push(stringToInt(token));
    }

    return s.peek();
}

int main() {
    string expression;
    cout << "Enter a postfix expression: ";
    getline(cin, expression);

    cout << "The result is: " << evaluatePostfix(expression) << endl;

    return 0;
}


OUTPUT:
mca086@mca-telnet:~/dsa/240970099/week5$ g++ evalpostfix.cpp
mca086@mca-telnet:~/dsa/240970099/week5$ ./a.out
Enter a postfix expression: 300 23 + 43 21 - * 84 7 + /
The result is: 78


P2.
#include <iostream>
#include <string>
#include <cctype>
#include <cstdlib>

using namespace std;

class Stack {
private:
    int* arr;
    int capacity;
    int top;

public:
    Stack(int size) {
        capacity = size;
        arr = new int[capacity];
        top = -1;
    }

    ~Stack() {
        delete[] arr;
    }

    void push(int value) {
        if (top == capacity - 1) {
            cout << "Stack overflow!" << endl;
            return;
        }
        arr[++top] = value;
    }

    int pop() {
        if (top == -1) {
            cout << "Stack underflow!" << endl;
            return -1;
        }
        return arr[top--];
    }

    int peek() {
        if (top == -1) {
            cout << "Stack is empty!" << endl;
            return -1;
        }
        return arr[top];
    }

    bool isEmpty() {
        return top == -1;
     return top == -1;
    }
};

int stringToInt(const string& str) {
    int result = 0;
    for (int i = 0; i < str.length(); i++) {
        result = result * 10 + (str[i] - '0');
    }
    return result;
}

int Operator(int a, int b, char op) {
    if (op == '+') return a + b;
    if (op == '-') return a - b;
    if (op == '*') return a * b;
    if (op == '/') {
        if (b == 0) {
            cout << "Error: Division by zero!" << endl;
            exit(1);
        }
        return a / b;
    }
    return 0;
}
int evaluatePrefix(const string& expr) {
    Stack s(expr.length());
    string token = "";

    for (int i = expr.length() - 1; i >= 0; i--) {
        char c = expr[i];

        if (c == ' ') {
            if (token != "") {
                s.push(stringToInt(token));
                token = "";
            }
        } else if (isdigit(c)) {
            token = c + token;
        } else if (c == '+' || c == '-' || c == '*' || c == '/') {
            int operand1 = s.pop();
            int operand2 = s.pop();
            int result = Operator(operand1, operand2, c);
            s.push(result);
        }
    }

    if (token != "") {
 s.push(stringToInt(token));
    }

    return s.peek();
}

int main() {
    string expr;
    cout << "Enter a prefix expression: ";
    getline(cin, expr);
    int result = evaluatePrefix(expr);
    cout << "Result: " << result << endl;
    return 0;
}

OUTPUT:
mca086@mca-telnet:~/dsa/240970099/week5$ g++ evalprefix.cpp
mca086@mca-telnet:~/dsa/240970099/week5$ ./a.out
Enter a prefix expression: / * + 4 8 - 6 5  * - 3 2 + 2 3
Result: 2
